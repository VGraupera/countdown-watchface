// Generated by CoffeeScript 1.7.1
(function() {
  var appMessageQueue, maxTriesForSendingAppMessage, sendAppMessageQueue, sendEvents, timeoutForAppMessage, timeoutForAppMessageRetry;

  maxTriesForSendingAppMessage = 3;

  timeoutForAppMessageRetry = 3000;

  timeoutForAppMessage = 100;

  appMessageQueue = [];

  sendAppMessageQueue = function() {
    var currentAppMessage;
    if (appMessageQueue.length > 0) {
      currentAppMessage = appMessageQueue[0];
      currentAppMessage.numTries = currentAppMessage.numTries || 0;
      if (currentAppMessage.numTries < maxTriesForSendingAppMessage) {
        console.log("Sending currentAppMessage to Pebble: " + JSON.stringify(currentAppMessage));
        return Pebble.sendAppMessage(currentAppMessage.message, function(e) {
          appMessageQueue.shift();
          return setTimeout((function() {
            return sendAppMessageQueue();
          }), timeoutForAppMessage);
        }, function(e) {
          console.log("Failed sending currentAppMessage for " + (JSON.stringify(currentAppMessage)) + "\n Error: " + e.data.error.message);
          currentAppMessage.numTries++;
          return setTimeout((function() {
            return sendAppMessageQueue();
          }), timeoutForAppMessageRetry);
        });
      } else {
        appMessageQueue.shift();
        return console.log("Failed sending AppMessage bailing. " + JSON.stringify(currentAppMessage));
      }
    } else {
      return console.log("AppMessage queue is empty.");
    }
  };

  sendEvents = function() {
    var date, event, events, _i, _len;
    console.log("Sending event list ...");
    events = [];
    if (localStorage.getItem("eventList") !== null) {
      events = JSON.parse(localStorage.getItem("eventList"));
    }
    appMessageQueue.push({
      message: {
        reset: 1,
        length: events.length
      }
    });
    for (_i = 0, _len = events.length; _i < _len; _i++) {
      event = events[_i];
      date = new Date(event.date);
      appMessageQueue.push({
        message: {
          name: event.name,
          target: "" + date.getTime() / 1000
        }
      });
    }
    return sendAppMessageQueue();
  };

  Pebble.addEventListener("ready", function(e) {
    console.log("On ready event ...");
    return sendEvents();
  });

  Pebble.addEventListener("appmessage", function(e) {
    console.log("Received from Pebble: " + JSON.stringify(e.payload));
    if (e.payload.update) {
      return sendEvents();
    }
  });

  Pebble.addEventListener("showConfiguration", function(e) {
    return Pebble.openURL("http://countdown-watchface.s3-website-us-west-1.amazonaws.com");
  });

  Pebble.addEventListener("webviewclosed", function(e) {
    var events;
    if (e.response) {
      events = JSON.parse(decodeURIComponent(e.response));
      console.log("Events received from settings page: " + JSON.stringify(events));
      localStorage.setItem("eventList", JSON.stringify(events));
      return sendEvents();
    }
  });

}).call(this);
